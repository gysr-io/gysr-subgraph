# schema definitions for GYSR subgraph

enum TokenType {
  Standard
  Stable
  UniswapLiquidity
}

type Token @entity {
  # token contract address
  id: ID!

  # token info
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!

  alias: String!
  type: TokenType!

  # stats
  price: BigDecimal!
  updated: BigInt!
}

enum GeyserState {
  Unfunded
  Boiling
  Active
  Stale
}

type Geyser @entity {
  # geyser contract address
  id: ID!

  # geyser config
  stakingToken: Token!
  rewardToken: Token!

  bonusMin: BigDecimal!
  bonusMax: BigDecimal!
  bonusPeriod: BigInt!

  createdTimestamp: BigInt!
  createdBlock: BigInt!

  tags: String!

  # stats
  users: BigInt!
  operations: BigInt!

  staked: BigDecimal!
  rewards: BigDecimal!
  funded: BigDecimal!
  distributed: BigDecimal!
  gysrSpent: BigDecimal!

  start: BigInt!
  end: BigInt!
  state: GeyserState!

  stakedUSD: BigDecimal!
  rewardsUSD: BigDecimal!
  tvl: BigDecimal!
  apy: BigDecimal!
  sharesPerToken: BigDecimal!
  updated: BigInt!
}

type _Schema_
  @fulltext(
    name: "geyserSearch",
    language: en
    algorithm: rank,
    include: [
      {
        entity: "Geyser",
        fields: [
          { name: "tags" }
        ]
      }
    ]
  )

type User @entity {
  # user address
  id: ID!

  # global stats
  operations: BigInt!
  earned: BigDecimal!

  # global positions
  positions: [Position!] @derivedFrom(field: "user")
}

type Position @entity {
  # geyser address, user address
  id: ID!

  user: User!
  geyser: Geyser!

  shares: BigDecimal!
  stakes: [Stake!]!
}

type Stake @entity {
  # geyser address, user address, timestamp
  id: ID!

  position: Position!
  user: User!
  geyser: Geyser!

  shares: BigDecimal!
  timestamp: BigInt!
}
