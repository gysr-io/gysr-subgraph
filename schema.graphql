# schema definitions for GYSR subgraph

enum TokenType {
  Standard
  Stable
  UniswapLiquidity
  BalancerLiquidity
  UmaKpiOption
}

type Token @entity {
  # token contract address
  id: ID!

  # token info
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!

  alias: String!
  type: TokenType!

  # stats
  price: BigDecimal!
  updated: BigInt!
}

enum PoolState {
  Unfunded
  Boiling
  Active
  Stale
}

enum PoolType {
  GeyserV1
  GeyserV2
  Fountain
}

type Pool @entity {
  # pool contract address
  id: ID!

  owner: User!

  # pool config
  stakingToken: Token!
  rewardToken: Token!

  timeMultMin: BigDecimal!
  timeMultMax: BigDecimal!
  timeMultPeriod: BigInt!

  createdTimestamp: BigInt!
  createdBlock: BigInt!

  tags: String!

  poolType: PoolType!

  # stats
  users: BigInt!
  operations: BigInt!

  staked: BigDecimal!
  rewards: BigDecimal!
  funded: BigDecimal!
  distributed: BigDecimal!
  gysrSpent: BigDecimal!
  sharesPerSecond: BigDecimal!
  fundings: [Funding!]!

  start: BigInt!
  end: BigInt!
  state: PoolState!

  stakedUSD: BigDecimal!
  rewardsUSD: BigDecimal!
  tvl: BigDecimal!
  apr: BigDecimal!
  usage: BigDecimal!
  stakingSharesPerToken: BigDecimal!
  rewardSharesPerToken: BigDecimal!
  updated: BigInt!
  volume: BigDecimal!

  # metadata
  name: String
  description: String
  website: String
}

type _Schema_
  @fulltext(
    name: "poolSearch",
    language: en
    algorithm: rank,
    include: [
      {
        entity: "Pool",
        fields: [
          { name: "tags" }
        ]
      }
    ]
  )

type User @entity {
  # user address
  id: ID!

  # global stats
  operations: BigInt!
  earned: BigDecimal!

  # global positions
  positions: [Position!] @derivedFrom(field: "user")

  # pools owned by this user
  pools: [Pool!] @derivedFrom(field: "owner")
}

type Position @entity {
  # pool address, user address
  id: ID!

  user: User!
  pool: Pool!

  shares: BigDecimal!
  stakes: [Stake!]!
}

type Stake @entity {
  # pool address, user address, timestamp
  id: ID!

  position: Position!
  user: User!
  pool: Pool!

  shares: BigDecimal!
  timestamp: BigInt!
}

type Platform @entity {
  id: ID!

  tvl: BigDecimal!
  users: BigInt!
  operations: BigInt!
  pools: BigInt!
  gysrSpent: BigDecimal!
  volume: BigDecimal!

  # list of actively priced pools
  _activePools: [Pool!]!
  _updated: BigInt!
}

enum TransactionType {
  Stake
  Unstake
  Claim
}

type Transaction @entity {
  # tx hash
  id: ID!

  type: TransactionType!
  timestamp: BigInt!
  pool: Pool!
  user: User!

  amount: BigDecimal!
  earnings: BigDecimal!
  gysrSpent: BigDecimal!
}

type Funding @entity {
  # pool id, created at timestamp
  id: ID!

  pool: Pool!
  token: Token!

  createdTimestamp: BigInt!
  start: BigInt!
  end: BigInt!

  originalAmount: BigDecimal!
  shares: BigDecimal!
  sharesPerSecond: BigDecimal!

  cleaned: Boolean!
}

type PoolDayData @entity {
  # pool id, day id
  id: ID!

  poolAddress: String!

  date: Int!
  totalStaked: BigDecimal!
  totalGysrSpent: BigDecimal!
  totalUsers: BigInt!
  tvl: BigDecimal!
  apr: BigDecimal!
  usage: BigDecimal!
  volume: BigDecimal!
}
