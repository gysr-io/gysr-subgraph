# schema definitions for GYSR subgraph

enum TokenType {
  Standard
  Stable
  Zero
  UniswapLiquidity
  BalancerLiquidity
  UmaKpiOption
  ERC721
  GUniLiquidity
}

type Token @entity {
  # token contract address
  id: ID!

  # token info
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!

  alias: String!
  type: TokenType!
  underlying: [Token!]!

  # pricing
  price: BigDecimal!
  hint: String!
  updated: BigInt!
}

enum FundingState {
  Unfunded
  Boiling
  Active
  Stale
}

enum PoolType {
  GeyserV1
  GeyserV2
  Fountain
  Aquarium
  Stream
  Waterfall # TODO name pending
  Reef # TODO name pending
  Unknown
}

enum StakingModuleType {
  V1
  ERC20
  ERC721
  Assignment
}

enum RewardModuleType {
  V1
  ERC20CompetitiveV2
  ERC20CompetitiveV3
  ERC20FriendlyV2
  ERC20FriendlyV3
  ERC20Linear
  ERC20Multi
}

type Pool @entity {
  # pool contract address
  id: ID!

  owner: User!

  # pool config
  stakingToken: Token # deprecated
  rewardToken: Token # deprecated
  stakingTokens: [PoolStakingToken!]!
  rewardTokens: [PoolRewardToken!]!

  timeMultMin: BigDecimal!
  timeMultMax: BigDecimal!
  timeMultPeriod: BigInt! # deprecated
  timePeriod: BigInt!

  createdTimestamp: BigInt!
  createdBlock: BigInt!

  tags: String!

  poolType: PoolType!
  stakingModuleType: StakingModuleType!
  rewardModuleType: RewardModuleType!
  stakingModule: String!
  rewardModule: String!

  # stats
  users: BigInt!
  operations: BigInt!

  staked: BigDecimal! # deprecated
  rewards: BigDecimal! # deprecated
  funded: BigDecimal! # deprecated
  distributed: BigDecimal! # deprecated
  gysrSpent: BigDecimal!
  gysrVested: BigDecimal!
  sharesPerSecond: BigDecimal! # deprecated
  fundings: [Funding!]!

  start: BigInt!
  end: BigInt!
  state: FundingState!

  stakedUSD: BigDecimal!
  rewardsUSD: BigDecimal!
  tvl: BigDecimal!
  apr: BigDecimal!
  usage: BigDecimal!
  stakingSharesPerToken: BigDecimal! # deprecated
  rewardSharesPerToken: BigDecimal! # deprecated
  updated: BigInt!
  volume: BigDecimal!

  # metadata
  name: String
  description: String
  website: String
}

type PoolStakingToken @entity {
  # pool address, token
  id: ID!
  token: Token!
  amount: BigDecimal!
  sharesPerToken: BigDecimal
}

type PoolRewardToken @entity {
  # pool address, token
  id: ID!
  token: Token!
  amount: BigDecimal!
  sharesPerToken: BigDecimal!
  sharesPerSecond: BigDecimal!
  apr: BigDecimal!
  funded: BigDecimal!
  distributed: BigDecimal!
  withdrawn: BigDecimal!
  state: FundingState!
}

type PoolRate @entity {
  # pool address, staking token, reward token
  id: ID!
  token: Token!
  amount: BigDecimal!
  sharesPerToken: BigDecimal

  funded: BigDecimal!
  distributed: BigDecimal!
  withdrawn: BigDecimal!
}

# TODO for multi
# type PoolStaking (amount, token, sharesPerToken)
# type PoolReward (amount, funded, sharesPerToken)
# type PoolRate (rate, apr, staking, reward)

type _Schema_
  @fulltext(
    name: "poolSearch"
    language: en
    algorithm: rank
    include: [
      {
        entity: "Pool"
        fields: [{ name: "tags" }, { name: "name" }, { name: "description" }]
      }
    ]
  )

type User @entity {
  # user address
  id: ID!

  # global stats
  operations: BigInt!
  earned: BigDecimal!
  gysrSpent: BigDecimal!

  # global positions
  positions: [Position!] @derivedFrom(field: "user")

  # pools owned by this user
  pools: [Pool!] @derivedFrom(field: "owner")
}

type Position @entity {
  # pool address, user address
  id: ID!
  account: String!

  user: User!
  pool: Pool!

  shares: BigDecimal!
  stakes: [Stake!]!
  updated: BigInt!
}

type Stake @entity {
  # pool address, user address, timestamp
  id: ID!

  position: Position!
  pool: Pool!

  shares: BigDecimal!
  timestamp: BigInt!
}

type Platform @entity {
  id: ID!

  tvl: BigDecimal!
  staked: BigDecimal!
  rewards: BigDecimal!
  users: BigInt!
  operations: BigInt!
  pools: BigInt!
  gysrSpent: BigDecimal!
  gysrVested: BigDecimal!
  gysrFees: BigDecimal!
  volume: BigDecimal!
  rewardsVolume: BigDecimal!

  # list of actively priced pools
  _activePools: [Pool!]!
  _updated: BigInt!
}

enum TransactionType {
  Stake
  Unstake
  Claim
}

type Transaction @entity {
  # tx hash
  id: ID!

  type: TransactionType
  timestamp: BigInt
  pool: Pool
  position: Position
  user: User

  amount: BigDecimal
  earnings: BigDecimal
  gysrSpent: BigDecimal
}

type Funding @entity {
  # pool id, created at timestamp
  id: ID!

  pool: Pool!
  token: Token!

  createdTimestamp: BigInt!
  start: BigInt!
  end: BigInt!

  originalAmount: BigDecimal!
  shares: BigDecimal!
  sharesPerSecond: BigDecimal!

  cleaned: Boolean!
}

type PoolDayData @entity {
  # pool id, day id
  id: ID!

  poolAddress: String!

  date: Int!
  totalStaked: BigDecimal!
  totalGysrSpent: BigDecimal!
  totalGysrVested: BigDecimal!
  totalUsers: BigInt!
  tvl: BigDecimal!
  apr: BigDecimal!
  usage: BigDecimal!
  volume: BigDecimal!
}
